-- USE ROLE 
USE ROLE ACCOUNTADMIN;

-- USE WAREHOUSE 
USE WAREHOUSE COMPUTE_WH;

-- CREATING A DATABASE FOR TODAY LET US NAME DATABASE AS 'SUPERSTORE_2016'
CREATE DATABASE IF NOT EXISTS SUPERSTORE_2016;

-- USE DATABASE 
USE DATABASE SUPERSTORE_2016

-- CREATE SCHEMA FOR THE TODAYS CLASS
CREATE SCHEMA IF NOT EXISTS SUPERSTORE_SCHEMA;

-- USE SCHEMA 
USE SCHEMA SUPERSTORE_SCHEMA;

-- CREATE TABLE FOR THE TODAYs class SALES
CREATE TABLE IF NOT EXISTS SALES (
    ROW_ID NUMBER NOT NULL, 
    ORDER_ID VARCHAR(100), 
    ORDER_DATE DATE, 
    SHIP_DATE DATE,
    SHIP_MODE VARCHAR(50) NOT NULL, 
    CUSTOMER_ID VARCHAR(50), 
    CUSTOMER_NAME VARCHAR(50), 
    SEGMENT VARCHAR(50),
    POSTAL_CODE NUMBER DEFAULT 0,
    CITY VARCHAR(50),
    STATE VARCHAR(50), 
    COUNTRY VARCHAR(50),
    REGION VARCHAR(50), 
    MARKET VARCHAR(50),
    PRODUCT_ID VARCHAR(100) NOT NULL,
    CATEGORY VARCHAR(50), 
    SUB_CATEGORY VARCHAR(50), 
    PRODUCT_NAME VARCHAR(50),
    SALES VARCHAR(50), 
    QUANTITY NUMBER, 
    DISCOUNT NUMBER, 
    PROFIT VARCHAR(50), 
    SHIPPING_COST NUMBER, 
    ORDER_PRIORITY VARCHAR(50)
);

-- 
UPDATE SALES
SET POSTAL_CODE = DEFAULT
WHERE POSTAL_CODE IS NULL;



-- LOAD THE DATA INTO MY TABLE USING UI
-- CHECKING THE DATASET 
SELECT * FROM SALES;


-- TEMPLATE
/*
SELECT -- THE COLUMNS I'LL GIVE YOU JUST SELECT THAT
FROM -- TABLE NAME 
WHERE -- CHECK IF THERE IS ANY CONDITION TO BE CHECKED, FILTER DATA
ORDER BY -- SORT, ASCENDING / DESCENDING MAI 
*/

-- WRITE A SQL QUERY TO SELECT ALL THE COLUMNS FROM THE TABLE SALES
SELECT *
FROM SALES;

-- WRTIE A SQL QUERY TO SELECT THE ROW_ID, ORDER_ID, SHIP_MODE, CUSTOMER_ID FROM THE SALES TABLE
SELECT ROW_ID, ORDER_ID, SHIP_MODE, CUSTOMER_ID 
FROM SALES;

-- WRITE A SQL QUERY TO DISPLAY THE ROW_ID, ORDER_ID, CUSTOMER_NAME, SEGMENT, SHIPPING_COST, QUANTITY
-- BUT NOTE THAT THERE WAS AN ERROR IN THE QUANTITY, YOU NEED TO ADD 1 VALUE TO THE PRESENT QUANTITY
SELECT
    ROW_ID, 
    ORDER_ID, 
    CUSTOMER_NAME, 
    SEGMENT, 
    SHIPPING_COST, 
    QUANTITY AS ORGINAL_QUANTITY,
    QUANTITY + 1 AS CORRECT_QUANTITY
FROM SALES;


/*
    WRITE A SQL QUERY TO RETRIVE ROW_ID, SEGMENT, COUTRY, DISCOUNT, ORDER_PRIORITY
    PLEASE WE MADE A MISTAKE WHILE ENTERING DISCOUNT COLUMN, THE DISCOUNT IS DISCOUNT CURRENT VALUE * 5
    FROM THE TABLE GIVEN TO YOU. Note that you need to display only the rows that are of order_prority High. 
*/
SELECT
    ROW_ID, 
    SEGMENT, 
    COUNTRY, 
    DISCOUNT, 
    DISCOUNT * 5 AS CORRECTED_VALUE_COL, 
    ORDER_PRIORITY
FROM SALES 
WHERE ORDER_PRIORITY = 'High';


/*
    WRITE A SQL QUERY TO GET ROW_ID, ORDER_DATE, SHIP_MODE, CUSTOMER_NAME, SEGMENT, POSTAL_CODE, SHIPPING_COST, ORDER_PRIORITY.
    NOTE THAT WE NEED TO ONLY SEE THE ROWS / FILTERED DATA BASED ON WHERE SHPPING CODE IS LESS THAN 25, AND THE 
    ORDER_PRIORITY IS LOW. PLEASE RETURN THE TABLE SORTED IN DESCENDING ORDER BASED ON THE ROW_ID COLUMN
*/
-- ROWS LOW < 35

SELECT
    ROW_ID, 
    ORDER_DATE, 
    SHIP_MODE, 
    CUSTOMER_NAME, 
    SEGMENT, 
    POSTAL_CODE, 
    SHIPPING_COST,
    ORDER_PRIORITY
FROM SALES
WHERE 
    (SHIPPING_COST < 25)
    AND 
    (ORDER_PRIORITY = 'Low')
ORDER BY ROW_ID DESC;