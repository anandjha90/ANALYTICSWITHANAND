-- customers Table – Stores customer details.

CREATE OR REPLACE TABLE rest_customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(50),
    join_date DATE,
    loyalty_level VARCHAR(20),   -- e.g., Regular, Silver, Gold, Platinum
    age INT,
    city VARCHAR(50)
);

-- employees Table – Stores employee information.

CREATE OR REPLACE TABLE rest_employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(50),
    hire_date DATE,
    position VARCHAR(50)         -- e.g., Server, Manager, Cashier
);

-- menus Table – Stores menu items and their prices.

CREATE OR REPLACE TABLE rest_menus (
    menu_id INT PRIMARY KEY,
    item_name VARCHAR(50),
    category VARCHAR(20),        -- e.g., Appetizer, Main Course, Dessert
    price DECIMAL(5, 2)
);

-- 4. orders Table – Stores order details. This table serves as a link between customers, employees, and menu items.

CREATE TABLE rest_orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT,
    employee_id INT,
    menu_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES rest_customers(customer_id),
    FOREIGN KEY (employee_id) REFERENCES rest_employees(employee_id),
    FOREIGN KEY (menu_id) REFERENCES rest_menus(menu_id)
);


SELECT * FROM REST_CUSTOMERS;
SELECT * FROM REST_EMPLOYEES;
SELECT * FROM REST_MENUS;
SELECT * FROM REST_ORDERS;

-------------------------------------------------------------------- BUSINESS USE-CASES -------------------------------------------------------------------------------------------------
-- These queries showcase various analytical methods to derive meaningful insights from complex restaurant data. Let me know if you need further details or specific adjustments!
/*
1. Identify Top-Selling Items by Customer Loyalty Level
Business Question: What are the top 5 best-selling menu items among Platinum loyalty-level customers across different cities?

Solution: This query joins the orders, customers, and menus tables to filter for Platinum-level customers and get total quantities sold for each item.

*/

SELECT 
    c.city,
    m.category,
    m.item_name,
    COUNT(o.order_id) AS total_orders,
    SUM(o.quantity) AS total_quantity_sold,
    SUM(m.price * o.quantity) AS total_revenue
FROM rest_orders o
INNER JOIN rest_customers c ON o.customer_id = c.customer_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
WHERE c.loyalty_level = 'Platinum'
GROUP BY 1,2,3
ORDER BY total_revenue DESC
LIMIT 5;

-- This query helps the restaurant chain understand which items are most popular among its highest-spending customers in various cities, which can inform targeted marketing or menu adjustments.

/*
2. Calculate Employee Contribution to Revenue by Month
Business Question: How much revenue has each employee generated each month, based on the orders they processed?

Solution: This query calculates monthly revenue generated by each employee by joining orders, employees, and menus tables.

*/
SELECT 
    e.employee_name,
    EXTRACT(YEAR FROM o.order_date) AS order_year,
    EXTRACT(MONTH FROM o.order_date) AS order_month,
    SUM(m.price * o.quantity) AS total_revenue
FROM rest_orders o
INNER JOIN rest_employees e ON o.employee_id = e.employee_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
GROUP BY 1,2,3
ORDER BY 1,2,3;

-- This insight helps managers assess employee performance in terms of monthly revenue, which can be useful for evaluating incentives or adjusting staffing based on seasonal demand.

/*
3. Determine Most Popular Menu Category Among Young Adults (Aged 18-30)
Business Question: What is the most popular menu category for customers aged 18-30, and how does it vary by city?

Solution: This query joins orders, customers, and menus tables to filter for young adults and identify the most popular menu categories across cities.

*/

SELECT 
    c.city,
    m.category,
    COUNT(o.order_id) AS orders_count
FROM rest_orders o
INNER JOIN rest_customers c ON o.customer_id = c.customer_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
WHERE c.age BETWEEN 18 AND 30
GROUP BY 1,2
ORDER BY 1, orders_count DESC;

-- This query provides insights into menu preferences among younger customers, allowing the restaurant to tailor menu offerings and promotions.

/*
4. Analyze Average Order Value by Customer Loyalty Level
Business Question: What is the average order value for each customer loyalty level?

Solution: This query joins orders, customers, and menus tables to calculate the average order value for customers at each loyalty level.

*/
SELECT 
    c.loyalty_level,
    ROUND(AVG(m.price * o.quantity),2) AS avg_order_value
FROM rest_orders o
INNER JOIN rest_customers c ON o.customer_id = c.customer_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
GROUP BY 1
ORDER BY avg_order_value DESC;

-- Understanding average order values by loyalty level allows the business to assess if higher-tier customers are spending significantly more, which helps in customer segmentation and loyalty program adjustments.

/*
5. Identify Cities with Highest Revenue Per Employee
Business Question: In which city do employees generate the most revenue on average?

Solution: This query calculates total revenue generated per employee in each city by joining orders, customers, menus, and employees tables.

*/

SELECT 
    c.city,
    e.employee_name,
    SUM(m.price * o.quantity) AS total_revenue
FROM rest_orders o
INNER JOIN rest_customers c ON o.customer_id = c.customer_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
INNER JOIN rest_employees e ON o.employee_id = e.employee_id
GROUP BY 1,2
ORDER BY total_revenue DESC;

-- This analysis helps management identify cities where employees perform best in revenue generation, which can guide resource allocation, hiring, or regional promotions.

/*
6. Calculate Monthly Loyalty Program Impact on Revenue
Business Question: How much monthly revenue is generated by customers in each loyalty level?

Solution: This query examines monthly revenue contributions by loyalty level using the orders, customers, and menus tables.

*/

SELECT 
    EXTRACT(YEAR FROM o.order_date) AS order_year,
    EXTRACT(MONTH FROM o.order_date) AS order_month,
    c.loyalty_level,
    SUM(m.price * o.quantity) AS total_revenue
FROM rest_orders o
INNER JOIN rest_customers c ON o.customer_id = c.customer_id
INNER JOIN rest_menus m ON o.menu_id = m.menu_id
GROUP BY 1,2,3
ORDER BY 1, 2, total_revenue DESC;

-- This query reveals the financial impact of the loyalty program by comparing revenue generation across different loyalty levels monthly, helping to assess loyalty program effectiveness over time.
